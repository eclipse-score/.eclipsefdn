{
    "repositories": {
        "cpp-rust-template-repository": {
            "description": "C++ & Rust Bazel Template Repository",
            "visibility": "public",
            "default_branch": "main",
            "has_issues": true,
            "has_wiki": false,
            "has_projects": false,
            "required_files": [
                {
                    "path": "BUILD",
                    "content": "load(\"@score_cr_checker//:cr_checker.bzl\", \"copyright_checker\")\n\ncopyright_checker(\n    name = \"copyright_check\",\n    srcs = [\"src\"],\n    template = \"@score_cr_checker//resources:templates\",\n    config = \"@score_cr_checker//resources:config\",\n    visibility = [\"//visibility:public\"],\n)\n"
                },
                {
                    "path": "MODULE.bazel",
                    "content": "module(name = \"cpp_rust_template_repository\", version = \"1.0\")\n\n\n# Add GoogleTest dependency\nbazel_dep(name = \"googletest\", version = \"1.14.0\")\n\n# Rust rules for Bazel\nbazel_dep(name = \"rules_rust\", version = \"0.56.0\")\n\n\n# Add your custom module from the bazel_registry\nbazel_dep(name = \"score_cr_checker\", version = \"0.2.0\")\n"
                },
                {
                    "path": ".bazelrc",
                    "content": "build --java_language_version=17\nbuild --tool_java_language_version=17\nbuild --java_runtime_version=remotejdk_17\nbuild --tool_java_runtime_version=remotejdk_17\n\ntest --test_output=errors\n\ncommon --registry=https://raw.githubusercontent.com/eclipse-score/bazel_registry/main/\ncommon --registry=https://bcr.bazel.build\n"
                },
                {
                    "path": ".gitignore",
                    "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n\n# Bazel\nbazel-*\nMODULE.bazel.lock\nuser.bazelrc\n\n# Ruff\n.ruff_cache\n\n# docs:incremental and docs:ide_support build artifacts\n/_build\n\n# Vale - editorial style guide\n.vale.ini\nstyles/\n\n# direnv - folder-specific bash configuration\n.envrc\n\n# Python\n.venv\n__pycache__/\n/.coverage\n"
                },
                {
                    "path": "LICENSE.md",
                    "content": "Copyright 2025 Contributors to the Eclipse Foundation\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
                },
                {
                    "path": ".bazelversion",
                    "content": "7.4.0"
                },
                {
                    "path": "README.md",
                    "content": "# C++ & Rust Bazel Template Repository\n\nThis repository serves as a **template** for setting up **C++ and Rust projects** using **Bazel**.  \nIt provides a **standardized project structure**, ensuring best practices for:\n- **Build configuration** with Bazel.\n- **Testing** (unit and integration tests).\n- **Documentation** setup.\n- **CI/CD workflows**.\n- **Development environment** configuration.\n\nThe template includes a **basic \"Hello World\" example** for both **C++ and Rust**, making it **buildable out of the box**.\n\n---\n\n## \ud83d\udcc2 Project Structure\n\n| File/Folder           | Description |\n|-----------------------|-------------|\n| `README.md`          | Short description & build instructions |\n| `src/`               | Source files for the module |\n| `tests/`             | Unit tests (UT) and integration tests (IT) |\n| `docs/`              | Documentation (Doxygen for C++ / mdBook for Rust) |\n| `.github/workflows/`  | CI/CD pipelines |\n| `.vscode/`           | Recommended VS Code settings |\n| `.bazelrc`, `MODULE.bazel`, `BUILD` | Bazel configuration & settings |\n| `LICENSE.md`         | Licensing information |\n| `CONTRIBUTION.md`    | Contribution guidelines |\n\n---\n\n## \ud83d\ude80 Getting Started\n\n### 1\ufe0f\u20e3 Clone the Repository\n```sh\ngit clone https://github.com/YOUR_ORG/YOUR_PROJECT.git\ncd YOUR_PROJECT\n```\n\n### 2\ufe0f\u20e3 Build the Project\n#### C++\n```sh\nbazel build //...\n```\n#### Rust\n```sh\nbazel build //rust/...\n```\n\n### 3\ufe0f\u20e3 Run the Example\n#### C++\n```sh\nbazel run //src:main\n```\n#### Rust\n```sh\nbazel run //rust:main\n```\n\n### 4\ufe0f\u20e3 Run Tests\n```sh\nbazel test //tests/...\n```\n\n---\n\n## \ud83d\udee0 Tools & Linters\n\nThe template integrates **tools and linters** from **centralized repositories** to ensure consistency across projects.\n\n- **C++:** `clang-tidy`, `cppcheck`, `Google Test`\n- **Rust:** `clippy`, `rustfmt`, `Rust Unit Tests`\n- **CI/CD:** GitHub Actions for automated builds and tests\n\n---\n\n## \ud83d\udcd6 Documentation\n\n- A **centralized docs structure** is planned.\n"
                },
                {
                    "path": "CONTRIBUTION.md",
                    "content": "# Eclipse Safe Open Vehicle Core (SCORE)\nThe [Eclipse Safe Open Vehicle Core](https://projects.eclipse.org/projects/automotive.score) project aims to develop an open-source core stack for Software Defined Vehicles (SDVs), specifically targeting embedded high-performance Electronic Control Units (ECUs).\nPlease check the [documentation](https://eclipse-score.github.io) for more information.\nThe source code is hosted at [GitHub](https://github.com/eclipse-score).\n\nThe communication mainly takes place via the [`score-dev` mailing list](https://accounts.eclipse.org/mailing-list/score-dev) and GitHub issues & pull requests (PR). And we have a chatroom for community discussions here [Eclipse SCORE chatroom](https://chat.eclipse.org/#/room/#automotive.score:matrix.eclipse.org).\n\nPlease note that for the project the [Eclipse Foundation\u2019s Terms of Use](https://www.eclipse.org/legal/terms-of-use/) apply.\nIn addition, you need to sign the [ECA](https://www.eclipse.org/legal/ECA.php) and the [DCO](https://www.eclipse.org/legal/dco/) to contribute to the project.\n\n## Contributing\n### Getting the source code & building the project\nPlease refer to the [README.md](README.md) for further information.\n\n### Getting involved\n\n#### Setup Phase\nThis phase is part of the eclipse Incubation Phase and shall establish all the processes needed for a safe development of functions. Only after this phase it will be possible to contribute code to the project. As the development in this project is driven by requirements, the processes and needed infrastructure incl. tooling will be established based on non-functional Stakeholder_Requirements<!-- TODO: fill link to correct page with requirements -->. During setup phase the contributions are Bug Fixes and Improvements (both on processes and infrastructure).\n\n#### Bug Fixes and Improvements\nImprovements are adding/changing processes and infrastructure, bug fixes can be also on development work products like code.\nIn case you want to fix a bug or contribute an improvement, please perform the following steps:\n1) Create a PR by using the corresponding template ([Bugfix PR template](.github/PULL_REQUEST_TEMPLATE/bug_fix.md) or [Improvement PR template](.github/PULL_REQUEST_TEMPLATE/improvement.md)). Please mark your PR as draft until it's ready for review by the Committers (see the [Eclipse Foundation Project Handbook](https://www.eclipse.org/projects/handbook/#contributing-committers) for more information on the role definitions). Improvements are requested by the definition or modification of [Stakeholder Requirements](docs/stakeholder_requirements) or [Tool Requirements](docs/tool_requirements) and may be implemented after acceptance/merge of the request by a second Improvement PR. The needed reviews are automatically triggered via the [CODEOWNERS](.github/CODEOWNERS) file in the repository.\n2) Initiate content review by opening a corresponding issue for the PR when it is ready for review. Review of the PR and final merge into the project repository is in responsibility of the Committers. Use the [Bugfix Issue template](.github/ISSUE_TEMPLATE/bug_fix.md) or [Improvement Issue template](.github/ISSUE_TEMPLATE/improvement.md) for this.\n\nPlease check here for our Git Commit Rules in the [Configuration_Tool_Guidelines](https://eclipse-score.github.io/score/process_description/guidelines/index.html).\n\nPlease use the [Stakeholder and Tool Requirements Template](https://eclipse-score.github.io/score/process_description/templates/index.html) when defining these requirements.\n\n![Contribution guide workflow](./docs/_assets/contribution_guide.svg \"Contribution guide workflow\")\n\n#### Additional Information\nPlease note, that all Git commit messages must adhere the rules described in the [Eclipse Foundation Project Handbook](https://www.eclipse.org/projects/handbook/#resources-commit).\n\nPlease find process descriptions here: [process description](https://eclipse-score.github.io/score/process_description/).\n"
                },
                {
                    "path": "docs/BUILD",
                    "content": ""
                },
                {
                    "path": "docs/conf.py",
                    "content": ""
                },
                {
                    "path": "docs/index.rst",
                    "content": ""
                },
                {
                    "path": "tests/rust/BUILD",
                    "content": "load(\"@rules_rust//rust:defs.bzl\", \"rust_test\")\n\nrust_test(\n    name = \"rust_hello_test\",\n    srcs = [\"test_main.rs\"],\n)\n"
                },
                {
                    "path": "tests/rust/test_main.rs",
                    "content": "#[test]\nfn test_hello() {\n    assert_eq!(2 + 2, 4);\n}\n"
                },
                {
                    "path": "tests/cpp/BUILD",
                    "content": "cc_test(\n    name = \"cpp_test_main\",\n    srcs = [\"test_main.cpp\"],\n    deps = [\n        \"@googletest//:gtest_main\",  # GoogleTest dependency via Bazel Modules\n    ],\n)\n"
                },
                {
                    "path": "tests/cpp/test_main.cpp",
                    "content": "#include <gtest/gtest.h>\n\n// Function to be tested\nint add(int a, int b) {\n    return a + b;\n}\n\n// Test case\nTEST(AdditionTest, HandlesPositiveNumbers) {\n    EXPECT_EQ(add(2, 3), 5);\n    EXPECT_EQ(add(10, 20), 30);\n}\n\nTEST(AdditionTest, HandlesNegativeNumbers) {\n    EXPECT_EQ(add(-2, -3), -5);\n    EXPECT_EQ(add(-10, 5), -5);\n}\n\nTEST(AdditionTest, HandlesZero) {\n    EXPECT_EQ(add(0, 0), 0);\n    EXPECT_EQ(add(0, 5), 5);\n    EXPECT_EQ(add(5, 0), 5);\n}\n\n// Main function for running tests\nint main(int argc, char **argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}\n"
                },
                {
                    "path": "src/rust/BUILD",
                    "content": "# *******************************************************************************\n# Copyright (c) 2025 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\nload(\"@rules_rust//rust:defs.bzl\", \"rust_binary\", \"rust_test\")\n\nrust_binary(\n    name = \"rust_hello\",\n    srcs = [\"main.rs\"],\n)\n"
                },
                {
                    "path": "src/rust/main.rs",
                    "content": "fn main() {\n    println!(\"Hello, Bazel World!\");\n}\n"
                },
                {
                    "path": "src/cpp/BUILD",
                    "content": "# *******************************************************************************\n# Copyright (c) 2025 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\ncc_binary(\n    name = \"cpp_hello\",\n    srcs = [\"main.cpp\"],\n    deps = [],  # No extra dependencies needed\n)\n"
                },
                {
                    "path": "src/cpp/main.cpp",
                    "content": "/********************************************************************************\n* Copyright (c) 2025 Contributors to the Eclipse Foundation\n*\n* See the NOTICE file(s) distributed with this work for additional\n* information regarding copyright ownership.\n*\n* This program and the accompanying materials are made available under the\n* terms of the Apache License Version 2.0 which is available at\n* https://www.apache.org/licenses/LICENSE-2.0\n*\n* SPDX-License-Identifier: Apache-2.0\n********************************************************************************/\n#include <iostream>\n\nint main() {\n    std::cout << \"Hello, Score World!\" << std::endl;\n    return 0;\n}\n"
                },
                {
                    "path": ".vscode/extensions.json",
                    "content": "{\n    \"recommendations\": [\n        // Editing *.drawio.svg files directly in VS Code\n        \"hediet.vscode-drawio\",\n\n        // Some convenient extensions for editing reStructuredText files\n        \"lextudio.restructuredtext\",\n\n        // Linting and live preview for score docs\n        \"swyddfa.esbonio\",\n\n        // ErrorLens highlights errors and warnings in your code / docs\n        \"usernamehw.errorlens\",\n\n        // Linting and formatting for Python (LSP via ruff server)\n        \"charliermarsh.ruff\",\n    ]\n}\n"
                },
                {
                    "path": ".vscode/settings.json",
                    "content": "{\n    // General Settings\n    \"files.insertFinalNewline\": true,\n    \"files.trimFinalNewlines\": true,\n    \"files.trimTrailingWhitespace\": true,\n    \"editor.insertSpaces\": true,\n    \"editor.tabCompletion\": \"on\",\n\n    // Default for any filetype\n    \"editor.rulers\": [\n        99\n    ],\n\n    // Exclude build, temp and cache folders\n    \"files.watcherExclude\": {\n        \".*/**\": true,\n        \"**/__pycache__/**\": true,\n        \"bazel-*/**\": true,\n        \".venv*/**\": true,\n        \"_build/**\": true,\n    },\n\n    // Python Settings\n    // Exclude build, temp and cache folders\n    \"python.analysis.exclude\": [\n        // Note: this overrides the default setting, so we need to re-exclude defaults like .* and **/__pycache__\n        \".*\",\n        \"**/__pycache__\",\n        \"bazel-*\",\n        \".venv*\",\n        \"_build\",\n    ],\n    \"[python]\": {\n        // In python using 80 characters per line is the standard.\n        \"editor.rulers\": [\n            79\n        ],\n        // Opinionated option for the future:\n        // \"editor.formatOnSave\": true,\n        \"editor.codeActionsOnSave\": {\n            \"source.sortImports\": \"explicit\"\n        },\n        \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n    },\n\n    // Markdown Settings\n    \"[markdown]\": {\n        // We mostly write markdown in some combination with python,\n        // so we use the same rulers as python.\n        \"editor.rulers\": [\n            79, 99\n        ]\n    },\n\n\n    // RST Settings\n    \"[restructuredtext]\": {\n        \"editor.tabSize\": 3,\n    },\n    //\n    //\n    // Esbonio 0.x (Current)\n    // see https://github.com/swyddfa/esbonio/blob/0.x/docs/lsp/getting-started.rst\n    // and https://github.com/swyddfa/esbonio/blob/0.x/docs/lsp/editors/vscode/_configuration.rst\n    \"esbonio.server.pythonPath\": \"${workspaceFolder}/.venv_docs/bin/python\",\n    \"esbonio.sphinx.srcDir\": \"${workspaceFolder}/docs\",\n    \"esbonio.sphinx.confDir\": \"${workspaceFolder}/docs\",\n    \"esbonio.sphinx.buildDir\": \"${workspaceFolder}/_build\",\n    \"esbonio.server.logLevel\": \"info\",\n    // Do not auto-install. We'll use the one in the venv.\n    \"esbonio.server.installBehavior\": \"nothing\",\n    // Enable port forwarding for preview if working on remote workstation\n    \"remote.autoForwardPorts\": true,\n    \"remote.autoForwardPortsSource\": \"process\",\n    //\n    //\n    // Esbonio 1.x (Preview)\n    \"esbonio.sphinx.pythonCommand\": [\n        \".venv_docs/bin/python\"\n    ],\n    \"esbonio.sphinx.buildCommand\": [\n        \"docs\",\n        \"_build\",\n        \"-T\", // show details in case of errors in extensions\n        \"--jobs\",\n        \"auto\",\n        \"--conf-dir\",\n        \"docs\"\n    ],\n    // default is \"error\", which doesn't show anything.\n    \"esbonio.logging.level\": \"warning\",\n    \"python.testing.pytestArgs\": [\n        \".\",\n        \"--ignore-glob=bazel-*/*\",\n        \"--ignore-glob=.venv_docs/*\",\n        \"--ignore-glob=_build/*\",\n\n    ],\n    \"python.testing.unittestEnabled\": false,\n    \"python.testing.pytestEnabled\": true,\n}\n"
                },
                {
                    "path": ".vscode/restructuredtext.code-snippets",
                    "content": "{\n  \"std_req_directive\": {\n    \"prefix\": \"std_req__\",\n    \"description\": \"Create a Standard Requirement\",\n    \"body\": [\n      \".. std_req:: $1\",\n      \"   :id: std_req__$2\",\n      \"   :status: ${3|valid|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"std_wp_directive\": {\n    \"prefix\": \"std_wp__\",\n    \"description\": \"Create a Standard Work Product\",\n    \"body\": [\n      \".. std_wp:: $1\",\n      \"   :id: std_wp__$2\",\n      \"   :status: ${3|valid|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"workflow_directive\": {\n    \"prefix\": \"wf__\",\n    \"description\": \"Create a Workflow\",\n    \"body\": [\n      \".. workflow:: $1\",\n      \"   :id: wf__$2\",\n      \"   :status: ${3|valid, draft|}\",\n      \"   :input: ${4}\",\n      \"   :output: ${5}\",\n      \"   :approved_by: ${6}\",\n      \"   :responsible: ${7}\",\n      \"\",\n      \"   ${8}\"\n    ]\n  },\n  \"gd_req_directive\": {\n    \"prefix\": \"gd_req__\",\n    \"description\": \"Create a Process Requirements\",\n    \"body\": [\n      \".. gd_req:: $1\",\n      \"   :id: gd_req__$2\",\n      \"   :status: ${3|valid, draft|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"gd_temp_directive\": {\n    \"prefix\": \"gd_temp__\",\n    \"description\": \"Create a Process Template\",\n    \"body\": [\n      \".. gd_temp:: $1\",\n      \"   :id: gd_temp__$2\",\n      \"   :status: ${3|valid, draft|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"gd_chklst_directive\": {\n    \"prefix\": \"gd_chklst__\",\n    \"description\": \"Create a Process Checklist\",\n    \"body\": [\n      \".. gd_chklst:: $1\",\n      \"   :id: gd_chklst__$2\",\n      \"   :status: ${3|valid, draft|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"gd_guidl_directive\": {\n    \"prefix\": \"gd_guidl__\",\n    \"description\": \"Create a Process Guideline\",\n    \"body\": [\n      \".. gd_guidl:: $1\",\n      \"   :id: gd_guidl__$2\",\n      \"   :status: ${3|valid, draft|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"gd_method_directive\": {\n    \"prefix\": \"gd_meth__\",\n    \"description\": \"Create a Process Method\",\n    \"body\": [\n      \".. gd_method:: $1\",\n      \"   :id: gd_meth__$2\",\n      \"   :status: ${3|valid, draft|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"workproduct_directive\": {\n    \"prefix\": \"wp__\",\n    \"description\": \"Create a Workproduct\",\n    \"body\": [\n      \".. workproduct:: $1\",\n      \"   :id: wp__$2\",\n      \"   :status: ${3|valid, draft|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"role_directive\": {\n    \"prefix\": \"rl__\",\n    \"description\": \"Create a Role\",\n    \"body\": [\n      \".. role:: $1\",\n      \"   :id: rl__$2\",\n      \"\",\n      \"   ${3}\"\n    ]\n  },\n  \"doc_concept_directive\": {\n    \"prefix\": \"doc_concept__\",\n    \"description\": \"Create a Concept Definition\",\n    \"body\": [\n      \".. doc_concept:: $1\",\n      \"   :id: doc_concept__$2\",\n      \"   :status: ${3|valid, draft|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"doc_getstrt_directive\": {\n    \"prefix\": \"doc_getstrt__\",\n    \"description\": \"Create a Getting Startet\",\n    \"body\": [\n      \".. doc_getstrt:: $1\",\n      \"   :id: doc_getstrt__$2\",\n      \"   :status: ${3|valid, draft|}\",\n      \"\",\n      \"   ${4}\"\n    ]\n  },\n  \"document_directive\": {\n    \"prefix\": \"doc__\",\n    \"description\": \"Create a Generic Document\",\n    \"body\": [\n      \".. document:: $1\",\n      \"   :id: doc__$2\",\n      \"   :safety: ${3|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${4|valid, draft, invalid|}\",\n      \"\",\n      \"   ${5}\"\n    ]\n  },\n  \"stkh_req_directive\": {\n    \"prefix\": \"stkh_req__\",\n    \"description\": \"Create a Stakeholder Requirement\",\n    \"body\": [\n      \".. stkh_req:: $1\",\n      \"   :id: stkh_req__$2\",\n      \"   :reqtype: ${3|Functional, Interface, Process, Legal, Non-Functional|}\",\n      \"   :security: ${4|YES, NO|}\",\n      \"   :safety: ${5|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${6|valid, invalid|}\",\n      \"   :rationale: ${7}\",\n      \"\",\n      \"   ${8}\"\n    ]\n  },\n  \"feat_req_directive\": {\n    \"prefix\": \"feat_req__\",\n    \"description\": \"Create a Feature Requirement\",\n    \"body\": [\n      \".. feat_req:: $1\",\n      \"   :id: feat_req__$2\",\n      \"   :reqtype: ${3|Functional, Interface, Process, Legal, Non-Functional|}\",\n      \"   :security: ${4|YES, NO|}\",\n      \"   :safety: ${5|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${6|valid, invalid|}\",\n      \"   :satisfies: ${7}\",\n      \"\",\n      \"   ${8}\"\n    ]\n  },\n  \"comp_req_directive\": {\n    \"prefix\": \"comp_req__\",\n    \"description\": \"Create a Component Requirement\",\n    \"body\": [\n      \".. comp_req:: $1\",\n      \"   :id: comp_req__$2\",\n      \"   :reqtype: ${3|Functional, Interface, Process, Legal, Non-Functional|}\",\n      \"   :security: ${4|YES, NO|}\",\n      \"   :safety: ${5|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${6|valid, invalid|}\",\n      \"   :satisfies: ${7}\",\n      \"\",\n      \"   ${8}\"\n    ]\n  },\n  \"tool_req_directive\": {\n    \"prefix\": \"tool_req__\",\n    \"description\": \"Create a Tool Requirement\",\n    \"body\": [\n      \".. tool_req:: $1\",\n      \"   :id: tool_req__$2\",\n      \"   :reqtype: ${3|Functional, Interface, Process, Legal, Non-Functional|}\",\n      \"   :security: ${4|YES, NO|}\",\n      \"   :safety: ${5|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${6|valid, invalid|}\",\n      \"   :satisfies: ${7}\",\n      \"\",\n      \"   ${8}\"\n    ]\n  },\n  \"aou_req_directive\": {\n    \"prefix\": \"aou_req__\",\n    \"description\": \"Create a Assumption of Use\",\n    \"body\": [\n      \".. aou_req:: $1\",\n      \"   :id: aou_req__$2\",\n      \"   :reqtype: ${3|Functional, Interface, Process, Legal, Non-Functional|}\",\n      \"   :security: ${4|YES, NO|}\",\n      \"   :safety: ${5|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${6|valid, invalid|}\",\n      \"\",\n      \"   ${7}\"\n    ]\n  },\n  \"feat_arc_sta_directive\": {\n    \"prefix\": \"feat_arc_sta__\",\n    \"description\": \"Create a Feature Architecture Static View\",\n    \"body\": [\n      \".. feat_arc_sta:: $1\",\n      \"   :id: feat_arc_sta__$2\",\n      \"   :security: ${3|YES, NO|}\",\n      \"   :safety: ${4|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${5|valid, invalid|}\",\n      \"   :satisfies: ${6}\",\n      \"\",\n      \"   ${7}\"\n    ]\n  },\n  \"feat_arc_dyn_directive\": {\n    \"prefix\": \"feat_arc_dyn__\",\n    \"description\": \"Create a Feature Architecture Dynamic View\",\n    \"body\": [\n      \".. feat_arc_dyn:: $1\",\n      \"   :id: feat_arc_dyn__$2\",\n      \"   :security: ${3|YES, NO|}\",\n      \"   :safety: ${4|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${5|valid, invalid|}\",\n      \"   :satisfies: ${6}\",\n      \"\",\n      \"   ${7}\"\n    ]\n  },\n  \"feat_arc_int_directive\": {\n    \"prefix\": \"feat_arc_int__\",\n    \"description\": \"Create a Feature Architecture Interfaces\",\n    \"body\": [\n      \".. feat_arc_int:: $1\",\n      \"   :id: feat_arc_int__$2\",\n      \"   :security: ${3|YES, NO|}\",\n      \"   :safety: ${4|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${5|valid, invalid|}\",\n      \"   :satisfies: ${6}\",\n      \"\",\n      \"   ${7}\"\n    ]\n  },\n  \"feat_arc_int_op_directive\": {\n    \"prefix\": \"feat_arc_int_op__\",\n    \"description\": \"Create a Feature Architecture Interface Operation\",\n    \"body\": [\n      \".. feat_arc_int_op:: $1\",\n      \"   :id: feat_arc_int_op__$2\",\n      \"   :security: ${3|YES, NO|}\",\n      \"   :safety: ${4|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${5|valid, invalid|}\",\n      \"\",\n      \"   ${6}\"\n    ]\n  },\n  \"mod_arc_sta_directive\": {\n    \"prefix\": \"mod_arc_sta__\",\n    \"description\": \"Create a Module Architecture Static View\",\n    \"body\": [\n      \".. mod_arc_sta:: $1\",\n      \"   :id: mod_arc_sta__$2\",\n      \"   :security: ${3|YES, NO|}\",\n      \"   :safety: ${4|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${5|valid, invalid|}\",\n      \"\",\n      \"   ${6}\"\n    ]\n  },\n  \"comp_arc_sta_directive\": {\n    \"prefix\": \"comp_arc_sta__\",\n    \"description\": \"Create a Component Architecture Static View\",\n    \"body\": [\n      \".. comp_arc_sta:: $1\",\n      \"   :id: comp_arc_sta__$2\",\n      \"   :security: ${3|YES, NO|}\",\n      \"   :safety: ${4|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${5|valid, invalid|}\",\n      \"   :satisfies: ${6}\",\n      \"\",\n      \"   ${7}\"\n    ]\n  },\n  \"comp_arc_dyn_directive\": {\n    \"prefix\": \"comp_arc_dyn__\",\n    \"description\": \"Create a Component Architecture Dynamic View\",\n    \"body\": [\n      \".. comp_arc_dyn:: $1\",\n      \"   :id: comp_arc_dyn__$2\",\n      \"   :security: ${3|YES, NO|}\",\n      \"   :safety: ${4|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${5|valid, invalid|}\",\n      \"   :satisfies: ${6}\",\n      \"\",\n      \"   ${7}\"\n    ]\n  },\n  \"comp_arc_int_directive\": {\n    \"prefix\": \"comp_arc_int__\",\n    \"description\": \"Create a Component Architecture Interfaces\",\n    \"body\": [\n      \".. comp_arc_int:: $1\",\n      \"   :id: comp_arc_int__$2\",\n      \"   :security: ${3|YES, NO|}\",\n      \"   :safety: ${4|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${5|valid, invalid|}\",\n      \"   :satisfies: ${6}\",\n      \"\",\n      \"   ${7}\"\n    ]\n  },\n  \"comp_arc_int_op_directive\": {\n    \"prefix\": \"comp_arc_int_op__\",\n    \"description\": \"Create a Component Architecture Interface Operation\",\n    \"body\": [\n      \".. comp_arc_int_op:: $1\",\n      \"   :id: comp_arc_int_op__$2\",\n      \"   :security: ${3|YES, NO|}\",\n      \"   :safety: ${4|QM, ASIL_B, ASIL_D|}\",\n      \"   :status: ${5|valid, invalid|}\",\n      \"   :satisfies: ${6}\",\n      \"\",\n      \"   ${7}\"\n    ]\n  }\n}"
                },
                {
                    "path": ".github/CODEOWNERS",
                    "content": "# Comment out as not in score yet\n# *                                  @eclipse-score/infrastructure-tooling-community\n# .*                                 @eclipse-score/infrastructure-tooling-community\n# .github/CODEOWNERS                 @eclipse-score/technical-lead\n\n# /docs                              @eclipse-score/process-community\n# /docs/concepts                     @eclipse-score/automotive-score-committers\n# /docs/glossary                     @eclipse-score/automotive-score-committers\n# /docs/features                     @eclipse-score/technical-lead\n# /docs/features/*/architecture      @eclipse-score/automotive-score-committers\n# /docs/features/*/requirements      @eclipse-score/technical-lead\n# /docs/features/*/safety_analysis   @eclipse-score/safety-manager\n# /docs/features/*/safety_planning   @eclipse-score/safety-manager @eclipse-score/technical-lead\n# /docs/features/*/verification      @eclipse-score/quality-manager @eclipse-score/safety-manager\n# /docs/manual                       @eclipse-score/automotive-score-committers\n# /docs/overview                     @eclipse-score/project-lead\n# /docs/pmp                          @eclipse-score/technical-lead @eclipse-score/process-community\n# /docs/pmp/quality_management       @eclipse-score/quality-manager\n# /docs/pmp/safety_management        @eclipse-score/safety-manager\n# /docs/pmp/security_management      @eclipse-score/security-manager\n# /docs/requirements/stakeholder     @eclipse-score/technical-lead\n# /docs/requirements/tool            @eclipse-score/infrastructure-tooling-community @eclipse-score/process-community\n# /docs/release                      @eclipse-score/quality-manager @eclipse-score/technical-lead\n# /docs/safety                       @eclipse-score/safety-manager @eclipse-score/technical-lead\n# /docs/security                     @eclipse-score/security-manager @eclipse-score/technical-lead\n# /docs/tutorials                    @eclipse-score/automotive-score-committers\n\n# /examples                          @eclipse-score/automotive-score-committers\n# /integration_tests                 @eclipse-score/automotive-score-committers\n# /tools                             @eclipse-score/infrastructure-tooling-community\n\n# in separate process_description repository:\n#\n# /process                  @eclipse-score/process-community\n\n# in separate <module_name> repositories:\n#\n# /docs                     @eclipse-score/process-community\n# /docs/manual              @eclipse-score/<module_name>/safety-manager\n# /docs/release             @eclipse-score/<module_name>/quality-manager @eclipse-score/<module_name>/module-lead\n# /docs/safety_plan         @eclipse-score/<module_name>/safety-manager @eclipse-score/<module_name>/module-lead\n# /docs/safety_analysis     @eclipse-score/<module_name>/safety-manager\n# /docs/verification        @eclipse-score/<module_name>/quality-manager @eclipse-score/<module_name>/safety-manager\n# /components               @eclipse-score/<module_name>/technical-lead\n# /components/*/            @eclipse-score/<module_name>/automotive-score-committers\n\n"
                },
                {
                    "path": ".github/PULL_REQUEST_TEMPLATE/bug_fix.md",
                    "content": "# Bugfix\n\n> [!IMPORTANT]\n> Use this template only for bugfixes that do not influence topics covered by contribution requests or improvements.\n\n> [!CAUTION]\n> Make sure to submit your pull-request as **Draft** until you are ready to have it reviewed by the Committers.\n\n## Description\n\n[A short description of the bug being fixed by the contribution.]\n\n## Related ticket\n\n> [!IMPORTANT]\n> Please replace `[ISSUE-NUMBER]` with the issue-number that tracks this bug fix. If there is no such\n> ticket yet, create one via [this issue template](../ISSUE_TEMPLATE/new?template=bug_fix.md).\n\ncloses [ISSUE-NUMBER] (bugfix ticket)\n"
                },
                {
                    "path": ".github/PULL_REQUEST_TEMPLATE/improvement.md",
                    "content": "# Improvement\n\n> [!IMPORTANT]\n> Use this template only for improvement that do not influence topics covered by contribution requests or bug fixes.\n\n> [!CAUTION]\n> Make sure to submit your pull-request as **Draft** until you are ready to have it reviewed by the Committers.\n\n## Description\n\n[A short description of the improvement being addressed by the contribution.]\n\n## Related ticket\n\n> [!IMPORTANT]\n> Please replace `[ISSUE-NUMBER]` with the issue-number that tracks this bug fix. If there is no such\n> ticket yet, create one via [this issue template](../ISSUE_TEMPLATE/new?template=improvement.md).\n\ncloses [ISSUE-NUMBER] (improvement ticket)\n"
                },
                {
                    "path": ".github/actions/gitlint/action.yml",
                    "content": "# *******************************************************************************\n# Copyright (c) 2024 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\n\nname: \"Gitlint Action\"\ndescription: \"An action to install and run Gitlint on PR commits\"\ninputs:\n  pr-number:\n    description: \"Pull Request number used to fetch commits\"\n    required: true\n  base-branch:\n    description: \"Base branch to compare commits against (default: origin/main)\"\n    default: \"origin/main\"\n    required: false\nruns:\n  using: \"docker\"\n  image: \"jorisroovers/gitlint:0.19.1\"\n  entrypoint: /bin/sh\n  args:\n    - -c\n    - |\n      git config --global --add safe.directory /github/workspace && \\\n      git fetch origin +refs/heads/main:refs/remotes/origin/main && \\\n      git fetch origin +refs/pull/${{ inputs.pr-number }}/head && \\\n      if ! gitlint --commits origin/main..HEAD; then \\\n        echo -e \"\\nWARNING: Your commit message does not follow the required format.\" && \\\n        echo \"Formatting rules: https://eclipse-score.github.io/score/process/guidance/git/index.html\" && \\\n        echo -e \"To fix your commit message, run:\\n\" && \\\n        echo \" git commit --amend\" && \\\n        echo \"Then update your commit (fix gitlint warnings). Finally, force-push:\" && \\\n        echo \" git push --force-with-lease\" && \\\n        exit 1; \\\n      fi\n"
                },
                {
                    "path": ".github/actions/deploy-versioned-pages/action.yml",
                    "content": "# *******************************************************************************\n# Copyright (c) 2025 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\n\nname: Deploy Versioned Pages\ndescription: Will push the documentation to the gh-pages branch, possibly with a versioned URL. When the PR is closed, the documentation will be deleted.\n# Note: this has some shortcomings, like race conditions when multiple PRs are opened at the same time,\n# problems with overwriting existing files, not deleting deleted files, etc.\n# We'll address these when we transform this action into a truly reusable independent action.\n# But for now, let's get it working!\n\ninputs:\n  source_folder:\n    description: \"Path to the html files to deploy in current working directory\"\n    required: true\n  versions_file:\n    description: \"Path to the versions file on gh-pages branch\"\n    default: \"versions.json\"\n  create_comment:\n    description: \"Create a comment on the PR with the URL to the documentation\" # in case of PR\n    default: \"true\"\n\noutputs:\n  target_folder:\n    description: \"The target folder for the documentation\"\n    value: ${{ steps.calc.outputs.target_folder }}\n\nruns:\n  using: \"composite\"\n  steps:\n    - name: Determine target_folder\n      id: calc\n      shell: bash\n      run: |\n        if [[ \"${{ github.event_name }}\" == 'pull_request_target' || \"${{ github.event_name }}\" == 'pull_request' ]]; then\n          target_folder=\"pr-${{ github.event.pull_request.number }}\"\n        else\n          target_folder=\"${{github.ref_name}}\"\n        fi\n        echo \"target_folder=$target_folder\" >> $GITHUB_OUTPUT\n\n    - name: Prepare the deploy folder\n      shell: bash\n      run: |\n        # Prepare the deploy folder\n        mkdir -p deploy_root\n        mkdir -p version_root\n        # Move the files to the deploy folder\n        mv ${{ inputs.source_folder }}/* deploy_root/\n        # Ensure that the folder is not treated as a Jekyll site\n        touch deploy_root/.nojekyll\n\n        # Add the target folder to the versions file\n        BASE_REPO=\"https://github.com/${{ github.repository }}.git\"\n\n        echo \"Fetching gh-pages from BASE_REPO: $BASE_REPO\"\n        git remote add base \"$BASE_REPO\" || git remote set-url base \"$BASE_REPO\"\n        git fetch base gh-pages --depth 1\n\n        # Checkout only the versions file from gh-pages branch of the base repo\n        git checkout base/gh-pages -- \"${{ inputs.versions_file }}\"\n\n        target=\"${{ steps.calc.outputs.target_folder }}\"\n        new_version=\"${{ steps.calc.outputs.target_folder }}\"\n\n\n        if jq -e --arg version \"$new_version\" 'map(select(.version == $version)) | length > 0' \"${{ inputs.versions_file }}\" > /dev/null; then\n          echo \"Version '$new_version' already exists in ${{ inputs.versions_file }}\"\n        else\n          REPO_NAME=$(basename ${{ github.repository }})\n          USER_NAME=$(echo ${{ github.repository }} | cut -d'/' -f1)\n          GITHUB_PAGES_URL=\"https://${USER_NAME}.github.io/${REPO_NAME}\"\n          if [ \"$target\" = \"/\" ]; then\n            new_url=\"${GITHUB_PAGES_URL}/\"\n          else\n            new_url=\"${GITHUB_PAGES_URL}/$target/\"\n          fi\n\n          jq --arg version \"$new_version\" --arg url \"$new_url\" '. + [{\"version\": $version, \"url\": $url}]' \"${{ inputs.versions_file }}\" > tmp_versions.json\n          mv tmp_versions.json \"${{ inputs.versions_file }}\"\n        fi\n        mv \"${{ inputs.versions_file }}\" version_root/\n        ls -al .\n        ls -al deploy_root\n        ls -al version_root\n        cat  version_root/\"${{ inputs.versions_file }}\"\n\n    - name: Deploy Documentation\n      uses: JamesIves/github-pages-deploy-action@v4\n      with:\n        folder: deploy_root\n        target-folder: ${{ steps.calc.outputs.target_folder }}\n        clean: true\n        clean-exclude: .nojekyll\n\n    - name: Deploy  version file \ud83d\ude80\n      uses: JamesIves/github-pages-deploy-action@v4\n      with:\n        folder: version_root\n        clean: false\n\n    - name: Find Comment\n      if: ${{ github.event_name == 'pull_request_target' }}\n      uses: peter-evans/find-comment@v3\n      id: fc\n      with:\n        issue-number: ${{ github.event.pull_request.number }}\n        comment-author: 'github-actions[bot]'\n        body-includes: The created documentation from the pull request\n\n    - name: Comment on PR with docs URL\n      if: ${{ github.event_name == 'pull_request_target' && inputs.create_comment == 'true' && steps.fc.outputs.comment-id == '' }}\n      uses: peter-evans/create-or-update-comment@v4\n      with:\n        issue-number: ${{github.event.pull_request.number}}\n        body: |\n          The created documentation from the pull request is available at: [docu-html](https://eclipse-score.github.io/score/${{steps.calc.outputs.target_folder}})\n        reactions: rocket\n"
                },
                {
                    "path": ".github/ISSUE_TEMPLATE/bug_fix.md",
                    "content": "---\nname: Bugfix\nabout: 'Issue to track a bugfix'\ntitle: 'Bugfix: Your bugfix title'\nlabels: 'codeowner_review'\nassignees: ''\n\n---\n\n> [!IMPORTANT]\n> Make sure to link this issue with the PR for your bugfix.\n\n\n"
                },
                {
                    "path": ".github/ISSUE_TEMPLATE/improvement.md",
                    "content": "---\nname: Improvement\nabout: 'Issue to track a improvement'\ntitle: 'Improvement: Your improvement title'\nlabels: 'codeowner_review'\nassignees: ''\n\n---\n\n> [!IMPORTANT]\n> Make sure to link this issue with the PR for your improvement.\n"
                },
                {
                    "path": ".github/workflows/license_check.yml",
                    "content": "# *******************************************************************************\n# Copyright (c) 2025 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\n\nname: License check preparation\non:\n  pull_request_target:\n    types: [opened, reopened, synchronize]\n  merge_group:\n    types: [checks_requested]\njobs:\n  license-check:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n      issues: write\n    steps:\n      # ------------------------------------------------------------------------------\n      # Checkout the correct branch safely in all scenarios (PRs, forks, merges)\n      # ------------------------------------------------------------------------------\n      # | Condition                              | Event Type         | Checked Out Branch    |\n      # |----------------------------------------|--------------------|-----------------------|\n      # | github.head_ref                        | pull_request_target | PR branch (source branch) |\n      # | github.event.pull_request.head.ref     | pull_request        | PR branch (source branch) |\n      # | github.ref                             | push, merge_group   | The branch being pushed/merged |\n      # ------------------------------------------------------------------------------\n      # ------------------------------------------------------------------------------\n      # Checkout the correct repository safely in all scenarios (PRs, forks, merges)\n      # ------------------------------------------------------------------------------\n      # | Condition                                      | Event Type         | Checked Out Repository           |\n      # |------------------------------------------------|--------------------|----------------------------------|\n      # | github.event.pull_request.head.repo.full_name  | pull_request       | Forked repository (if PR is from a fork) |\n      # | github.repository                              | push, merge_group  | Default repository (same repo PRs, merges, pushes) |\n      - name: Checkout repository (Handle all events)\n        uses: actions/checkout@v4.2.2\n        with:\n          ref: ${{ github.head_ref || github.event.pull_request.head.ref || github.ref }}\n          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}\n      - name: Setup Bazel\n        uses: bazel-contrib/setup-bazel@0.9.1\n      - name: Derive project shortname and repo URL\n        run: |\n          # Use a fixed shortname for the Dash project\n          SHORTNAME=\"automotive.score\"\n          REPO_URL=\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}\"\n          echo \"SHORTNAME=$SHORTNAME\" >> $GITHUB_ENV\n          echo \"REPO_URL=$REPO_URL\" >> $GITHUB_ENV\n      - name: Run license checks\n        run: |\n          # The bash script won't fail on error. We capture the stderr and stdout and we save\n          # the exit code of the bazel command in a variable\n          # The output will also be stored in a file using the tee command\n          # We save both  output and exit code in the GH actions env file\n          set +e  # Ensure script does not exit on failure, even if the bazel run fails, the execution will continue\n          OUTPUT=$(\n            bazel run //docs:license.check.python -- \\\n              -review \\\n              -project \"$SHORTNAME\" \\\n              -repo \"$REPO_URL\" \\\n              -token \"${{ secrets.ECLIPSE_GITLAB_API_TOKEN }}\" 2>&1\n          )\n          EXIT_CODE=$?\n          echo \"$OUTPUT\" | tee license-check-output.txt\n          echo \"exit_code=$EXIT_CODE\" >> $GITHUB_ENV\n          echo \"output<<EOF\" >> $GITHUB_ENV\n          echo \"$OUTPUT\" >> $GITHUB_ENV\n          echo \"EOF\" >> $GITHUB_ENV\n      - name: Comment on PR with License Check Results\n        if: github.event.pull_request\n        uses: peter-evans/create-or-update-comment@v4\n        with:\n          issue-number: ${{ github.event.pull_request.number }}\n          body: |\n            ### License Check Results\n            \ud83d\ude80 The **license check preparation** job ran successfully.\n\n            **Status:** ${{ env.exit_code == 0 && '\u2705 Passed' || '\u26a0\ufe0f Needs Review' }}\n\n            <details>\n            <summary>Click to expand output</summary>\n\n            ```\n            ${{ env.output }}\n            ```\n\n            </details>\n          reactions: eyes\n"
                },
                {
                    "path": ".github/workflows/docs-cleanup.yml",
                    "content": "# *******************************************************************************\n# Copyright (c) 2025 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\n\nname: Daily Documentation Cleanup\non:\n  schedule:\n    - cron: \"0 0 * * *\" # Runs every day at midnight UTC\n  workflow_dispatch: # Allows manual trigger\n\njobs:\n  docs-cleanup:\n    name: Cleanup old documentation\n    runs-on: ubuntu-latest\n    permissions:\n      pages: write\n      contents: write\n    steps:\n      - name: Checkout gh-pages branch\n        uses: actions/checkout@v4\n        with:\n          repository: ${{ github.repository }}\n          ref: gh-pages\n          fetch-depth: 0\n\n      - name: Cleanup old documentation\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          gh auth status  # Verify authentication\n\n          # Fetch list of active branches\n          ACTIVE_BRANCHES=$(gh api --paginate repos/${{ github.repository }}/branches --jq '.[].name')\n\n          # Fetch list of open PRs\n          OPEN_PRS=$(gh api --paginate repos/${{ github.repository }}/pulls --jq '.[].number' | sed 's/^/pr-/')\n\n          # Combine active branches and PRs into one list\n          VALID_ENTRIES=$(echo -e \"$ACTIVE_BRANCHES\\n$OPEN_PRS\")\n\n          # Get current folder names, excluding hidden folders\n          CURRENT_FOLDERS=$(find . -maxdepth 1 -type d -not -name '.' -not -path './.*' -exec basename {} \\;)\n\n          # Read versions.json\n          if [[ -f versions.json ]]; then\n            jq '.' versions.json > versions_tmp.json\n          else\n            echo \"[]\" > versions_tmp.json\n          fi\n\n          # Remove outdated folders and update versions.json\n          for FOLDER in $CURRENT_FOLDERS; do\n            if ! echo \"$VALID_ENTRIES\" | grep -Fxq \"$FOLDER\"; then\n              echo \"Removing $FOLDER\"\n              rm -rf \"$FOLDER\"\n              jq --arg ver \"$FOLDER\" 'map(select(.version != $ver))' versions_tmp.json > tmp.json && mv tmp.json versions_tmp.json\n            fi\n          done\n\n          # Remove versions.json entries without corresponding folders\n          jq '[.[] | select((.version | IN($folders[])))]' --argjson folders \"$(ls -1 | jq -R -s -c 'split(\"\\n\")[:-1]')\" versions_tmp.json > versions_tmp_clean.json\n\n          # Ensure \"main\" is the first entry and others sorted alphabetically\n          jq '[.[] | select(.version != \"main\")] | sort_by(.version) | [{\"version\": \"main\", \"url\": \"https://eclipse-score.github.io/score/main/\"}] + .' versions_tmp_clean.json > versions.json\n\n          # Clean up temp files\n          rm versions_tmp.json versions_tmp_clean.json\n\n      - name: Commit and Push Changes\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          branch: gh-pages\n          folder: .\n          commit-message: \"Daily cleanup of outdated documentation\"\n"
                },
                {
                    "path": ".github/workflows/gitlint.yml",
                    "content": "# *******************************************************************************\n# Copyright (c) 2024 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\n\nname: Gitlint check\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\njobs:\n  lint-commits:\n    name: check-commit-messages\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Run Gitlint Action\n        if: ${{ github.event_name == 'pull_request' }}\n        uses: ./.github/actions/gitlint\n        with:\n          pr-number: ${{ github.event.number }}\n          base-branch: ${{ github.event.pull_request.base.ref }}\n"
                },
                {
                    "path": ".github/workflows/docs.yml",
                    "content": "# *******************************************************************************\n# Copyright (c) 2025 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\n\nname: Documentation\non:\n  pull_request_target:\n    types: [opened, reopened, synchronize] # Handles forked PRs\n  push:\n    branches:\n      - main # docs are built only on push to main branch, for feature branches there are PR builds\n  merge_group:\n    types: [checks_requested]\n\njobs:\n  docs-build:\n    name: Build documentation\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      # ------------------------------------------------------------------------------\n      # Checkout the correct branch safely in all scenarios (PRs, forks, merges)\n      # ------------------------------------------------------------------------------\n      # | Condition                              | Event Type         | Checked Out Branch    |\n      # |----------------------------------------|--------------------|-----------------------|\n      # | github.head_ref                        | pull_request_target | PR branch (source branch) |\n      # | github.event.pull_request.head.ref     | pull_request        | PR branch (source branch) |\n      # | github.ref                             | push, merge_group   | The branch being pushed/merged |\n      # ------------------------------------------------------------------------------\n      # ------------------------------------------------------------------------------\n      # Checkout the correct repository safely in all scenarios (PRs, forks, merges)\n      # ------------------------------------------------------------------------------\n      # | Condition                                      | Event Type         | Checked Out Repository           |\n      # |------------------------------------------------|--------------------|----------------------------------|\n      # | github.event.pull_request.head.repo.full_name  | pull_request       | Forked repository (if PR is from a fork) |\n      # | github.repository                              | push, merge_group  | Default repository (same repo PRs, merges, pushes) |\n      - name: Checkout repository (Handle all events)\n        uses: actions/checkout@v4.2.2\n        with:\n          ref: ${{ github.head_ref || github.event.pull_request.head.ref || github.ref }}\n          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}\n      - name: Setup Bazel\n        uses: bazel-contrib/setup-bazel@0.9.1\n      - name: Build documentation\n        run: |\n          bazel build //docs:github-pages && cp bazel-bin/docs/github-pages.tar .\n        # ------------------------------------------------------------------------------\n        # Generate a unique artifact name to ensure proper tracking in all scenarios\n        # ------------------------------------------------------------------------------\n        # | Condition                                     | Event Type             | Artifact Name Value                          |\n        # |-----------------------------------------------|------------------------|----------------------------------------------|\n        # | github.event.pull_request.head.sha            | pull_request           | PR commit SHA (ensures uniqueness per PR)    |\n        # | github.event.pull_request.head.sha            | pull_request_target    | PR commit SHA (ensures uniqueness per PR)    |\n        # | github.sha                                    | push, merge_group      | Current commit SHA (used for main branch)    |\n        # ------------------------------------------------------------------------------\n      - name: Upload artifact for job analysis\n        uses: actions/upload-artifact@v4.4.0\n        with:\n          name: github-pages-${{ github.event.pull_request.head.sha || github.sha }}\n          path: github-pages.tar\n          retention-days: 1\n          if-no-files-found: error\n\n  docs-deploy:\n    name: Deploy documentation to GitHub Pages\n    permissions:\n      pages: write\n      id-token: write\n      contents: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    needs: docs-build\n    steps:\n      # ------------------------------------------------------------------------------\n      # Always checks out the BASE repository since pull_request_target is used.\n      # This ensures that the workflow runs with trusted code from the base repo,\n      # even when triggered by a pull request from a fork.\n      # ------------------------------------------------------------------------------\n      - name: Checkout repository\n        uses: actions/checkout@v4.2.2\n\n      - name: Download documentation artifact\n        uses: actions/download-artifact@v4.1.8\n        # ------------------------------------------------------------------------------\n        # Generate a unique artifact name to ensure proper tracking in all scenarios\n        # ------------------------------------------------------------------------------\n        # | Condition                                     | Event Type             | Artifact Name Value                          |\n        # |-----------------------------------------------|------------------------|----------------------------------------------|\n        # | github.event.pull_request.head.sha            | pull_request           | PR commit SHA (ensures uniqueness per PR)    |\n        # | github.event.pull_request.head.sha            | pull_request_target    | PR commit SHA (ensures uniqueness per PR)    |\n        # | github.sha                                    | push, merge_group      | Current commit SHA (used for main branch)    |\n        # ------------------------------------------------------------------------------\n        with:\n          name: github-pages-${{ github.event.pull_request.head.sha || github.sha }}\n\n      - name: Untar documentation artifact\n        run: mkdir -p extracted_docs && tar -xf github-pages.tar -C extracted_docs\n\n      - name: Deploy \ud83d\ude80\n        id: pages-deployment\n        uses: ./.github/actions/deploy-versioned-pages\n        with:\n          source_folder: extracted_docs\n"
                },
                {
                    "path": ".github/workflows/format.yml",
                    "content": "# *******************************************************************************\n# Copyright (c) 2024 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\n\nname: Formatting checks\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n  merge_group:\n    types: [checks_requested]\njobs:\n  formatting-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4.2.2\n      - name: Setup Bazel\n        uses: bazel-contrib/setup-bazel@0.9.1\n      - name: Run formatting checks\n        run: |\n          bazel test //:format.check\n"
                },
                {
                    "path": ".github/workflows/copyright.yml",
                    "content": "# *******************************************************************************\n# Copyright (c) 2024 Contributors to the Eclipse Foundation\n#\n# See the NOTICE file(s) distributed with this work for additional\n# information regarding copyright ownership.\n#\n# This program and the accompanying materials are made available under the\n# terms of the Apache License Version 2.0 which is available at\n# https://www.apache.org/licenses/LICENSE-2.0\n#\n# SPDX-License-Identifier: Apache-2.0\n# *******************************************************************************\n\nname: Copyright checks\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n  merge_group:\n    types: [checks_requested]\njobs:\n  copyright-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4.2.2\n      - name: Setup Bazel\n        uses: bazel-contrib/setup-bazel@0.9.1\n      - name: Run copyright checks\n        run: |\n          bazel run //:copyright.check\n"
                }
            ]
        }
    }
}